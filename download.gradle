void downloadSatResouce(List<String> downloads, String url, String basePath) {
    String baseUrl = url.contains('http://www.sat.gob.mx/sitio_internet') ? 'http://www.sat.gob.mx/sitio_internet/' : 'https://raw.githubusercontent.com/GrupoCorasa/cfdi-base-sat-resources/main/'
    String filePath = url.replace(baseUrl, basePath + (url.endsWith('.xslt') ? 'xslt/' : 'xsd/'))
    if (url.equalsIgnoreCase('http://www.sat.gob.mx/sitio_internet/cfd/catalogos/catCFDI.xsd')) {
        url = 'https://raw.githubusercontent.com/GrupoCorasa/cfdi-base-sat-resources/main/cfd/catalogos/catCFDI.xsd'
    }
    if (url.equalsIgnoreCase("http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/CartaPorte20.xslt")) {
        filePath = "src/main/resources/xslt/common/CartaPorte20/CartaPorte20.xslt"
    } else if (url.equalsIgnoreCase("http://www.sat.gob.mx/sitio_internet/cfd/CartaPorte/CartaPorte20.xsd")) {
        filePath = "src/main/resources/xsd/common/CartaPorte20/CartaPorte20.xsd"
    }
    if (url.find('/cfd/[0-9]{1}/') == null) {
        //if url contain cfd version change 'common' dir
        filePath = filePath.replaceAll('/cfd/', '/common/')
    }
    download {
        src url
        dest filePath
        overwrite true
    }
    File file = new File(filePath)
    downloads.add(filePath.replace('src/main/resources', ''))

    String regexFilter = url.endsWith('.xsd') ?
            '(?<=schemaLocation=\")(.*?)(?=\")' : //regex to find schema location
            '(?<=xsl:include href=\")(.*?)(?=\")' //regex to find xslt includes
    String content = file.getText('UTF-8')
    content.findAll(regexFilter)
            .each { newUrlResource ->
                downloadSatResouce(downloads, newUrlResource, basePath)
                if (newUrlResource.endsWith('.xslt') && !newUrlResource.contains('cadenaoriginal')) {
                    //also download xsd files of every xslt
                    if (newUrlResource.equalsIgnoreCase("http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/CartaPorte20.xslt")) {
                        downloadSatResouce(downloads, "http://www.sat.gob.mx/sitio_internet/cfd/CartaPorte/CartaPorte20.xsd", basePath.replace('/xslt/', '/xsd/'))
                    } else {
                        downloadSatResouce(downloads, newUrlResource.replace('.xslt', '.xsd'), basePath.replace('/xslt/', '/xsd/'))
                    }
                }
                String newUrlName = newUrlResource.substring(newUrlResource.lastIndexOf('/') + 1)
                String localPath = downloads.find { value -> value.endsWith(newUrlName) }
                if (localPath.endsWith('.xsd')) {
                    String relativePath = "./" + new File("$rootDir/$filePath").parentFile.relativePath(new File("$rootDir/src/main/resources$localPath"))
                    content = content.replace(newUrlResource, relativePath) //replace value with local file
                } else if (localPath.endsWith('.xslt')) {
                    content = content.replace(newUrlResource, localPath) //replace value with local file
                }
            }
    //some values of this file cant fit into a java class (max 64kb per method)
    if (url.endsWith('catCFDI.xsd')) {
        //remove colonia, codigo postal and claveprodserv because max java size
        content = content.replaceAll("(.*?)<xs:enumeration value=\"([0-9]{4,5}|[0-9]{8})\"\\/>(\\r\\n|\\r|\\n)", "")
        //add regex validation to colonias
        content = content.replaceAll("(?<=<xs:simpleType name=\"c_Colonia\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="[0-9]{4}"/>
        </xs:restriction>
    """)
        //add regex validation to codigo postal
        content = content.replaceAll("(?<=<xs:simpleType name=\"c_CodigoPostal\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="[0-9]{5}"/>
        </xs:restriction>
    """)
        //add regex validation to claveprodserv
        content = content.replaceAll("(?<=<xs:simpleType name=\"c_ClaveProdServ\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="[0-9]{8}"/>
        </xs:restriction>
    """)
    }
//some values of this file cant fit into a java class (max 64kb per method)
    if (url.endsWith('tdCFDI.xsd')) {
        //set base tipe to string
        content = content.replaceAll("(?<=<xs:simpleType name=\"t_CuentaBancaria\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
    <xs:annotation>
      <xs:documentation>Tipo definido para expresar la cuenta bancarizada.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value="[0-9]{10,18}"/>
    </xs:restriction>
  """)
    }
    //Remove some catalogos on complementos / Two classes have the same XML type name
    if (url.endsWith('catComExt.xsd') || url.endsWith('ComercioExterior10.xsd')) {
        //remove colonia, codigo postal and claveprodserv because max java size
        content = content.replaceAll("(.*?)<xs:enumeration value=\"([0-9]{8}|[0-9]{10})\"\\/>(\\r\\n|\\r|\\n)", "")
        //add regex validation to colonias
        content = content.replaceAll("(?<=<xs:simpleType name=\"c_FraccionArancelaria\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value="[0-9]{8,10}"/>
    </xs:restriction>
  """)
    }
//xsd had bad type, in some fields need to be string to be "02" instead "2"
    if (url.endsWith('nomina11.xsd')) {
        content = content.replaceAll("(?<=<xs:attribute name=\"TipoPercepcion\" use=\"required\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:attribute>)", """
\t\t\t\t\t\t\t\t\t\t<xs:annotation>
\t\t\t\t\t\t\t\t\t\t\t<xs:documentation>Clave agrupadora. Clasifica la percepción conforme al catálogo publicado en el portal del SAT en internet</xs:documentation>
\t\t\t\t\t\t\t\t\t\t</xs:annotation>
\t\t\t\t\t\t\t\t\t\t<xs:simpleType>
\t\t\t\t\t\t\t\t\t\t\t<xs:restriction base="xs:string">
\t\t\t\t\t\t\t\t\t\t\t\t<xs:pattern value="[0-9]{3}"/>
\t\t\t\t\t\t\t\t\t\t\t</xs:restriction>
\t\t\t\t\t\t\t\t\t\t</xs:simpleType>
\t\t\t\t\t\t\t\t\t""")
        content = content.replaceAll("(?<=<xs:attribute name=\"TipoDeduccion\" use=\"required\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:attribute>)", """
\t\t\t\t\t\t\t\t\t\t<xs:annotation>
\t\t\t\t\t\t\t\t\t\t\t<xs:documentation>Clave agrupadora. Clasifica la deducción conforme al catálogo publicado en el portal del SAT en internet</xs:documentation>
\t\t\t\t\t\t\t\t\t\t</xs:annotation>
\t\t\t\t\t\t\t\t\t\t<xs:simpleType>
\t\t\t\t\t\t\t\t\t\t\t<xs:restriction base="xs:string">
\t\t\t\t\t\t\t\t\t\t\t\t<xs:pattern value="[0-9]{3}"/>
\t\t\t\t\t\t\t\t\t\t\t</xs:restriction>
\t\t\t\t\t\t\t\t\t\t</xs:simpleType>
\t\t\t\t\t\t\t\t\t""")
        content = content.replace("<xs:attribute name=\"TipoIncapacidad\" type=\"xs:int\" use=\"required\">", "<xs:attribute name=\"TipoIncapacidad\" type=\"xs:string\" use=\"required\">")
        content = content.replaceAll("(?<=<xs:attribute name=\"TipoRegimen\" use=\"required\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:attribute>)", """
\t\t\t\t<xs:annotation>
\t\t\t\t\t<xs:documentation>Atributo requerido para la expresión de la clave del régimen por el cual se tiene contratado al trabajador, conforme al catálogo publicado en el portal del SAT en internet</xs:documentation>
\t\t\t\t</xs:annotation>
\t\t\t\t<xs:simpleType>
\t\t\t\t\t<xs:restriction base="xs:string">
\t\t\t\t\t</xs:restriction>
\t\t\t\t</xs:simpleType>
\t\t\t""")
        content = content.replaceAll("(?<=<xs:attribute name=\"Banco\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:attribute>)", """
\t\t\t\t<xs:annotation>
\t\t\t\t\t<xs:documentation>Atributo opcional para la expresión del Banco conforme al catálogo, donde se realiza un depósito de nómina</xs:documentation>
\t\t\t\t</xs:annotation>
\t\t\t\t<xs:simpleType>
\t\t\t\t\t<xs:restriction base="xs:string">
\t\t\t\t\t\t<xs:pattern value="[0-9]{3}"/>
\t\t\t\t\t</xs:restriction>
\t\t\t\t</xs:simpleType>
\t\t\t""")
        content = content.replaceAll("(?<=<xs:simpleType name=\"t_Clabe\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
\t\t<xs:annotation>
\t\t\t<xs:documentation>Tipo definido para expresar la CLABE interbancaria</xs:documentation>
\t\t</xs:annotation>
\t\t<xs:restriction base="xs:string">
\t\t\t<xs:pattern value="[0-9]{18}"/>
\t\t</xs:restriction>
\t""")
    }
//some values of this file cant fit into a java class (max 64kb per method)
    if (url.endsWith('catCartaPorte.xsd')) {
        //remove estaciones because max java size
        content = content.replaceAll("(.*?)<xs:enumeration value=\"(PM|EA|EF)([0-9]{3,4})\"\\/>(\\r\\n|\\r|\\n)", "")
        //add regex validation
        String[] contentSplit = content.split("<xs:simpleType name=\"c_Estaciones\">")
        String continueContent = contentSplit[1].split("<xs:simpleType name=\"c_ClaveUnidadPeso\">")[1]
        content = contentSplit[0] + """<xs:simpleType name="c_Estaciones">
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="[a-zA-Z0-9\\\\.]{3,12}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="c_ClaveUnidadPeso">""" + continueContent

        content = content.replaceAll("(.*?)<xs:enumeration value=\"[0-9]{8}\"\\/>(\\r\\n|\\r|\\n)", "")
        //add regex validation
        content = content.replaceAll("(?<=<xs:simpleType name=\"c_ClaveProdServCP\">)((.|(\\r\\n|\\r|\\n))*?)(?=<\\/xs:simpleType>)", """
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="[0-9]{8}"/>
        </xs:restriction>
        """)
        //remove materialPeligroso because max java size
        contentSplit = content.split("<xs:simpleType name=\"c_MaterialPeligroso\">")
        continueContent = contentSplit[1].split("<xs:simpleType name=\"c_TipoEmbalaje\">")[1]
        content = contentSplit[0] + """<xs:simpleType name="c_MaterialPeligroso">
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="M[0-9]{4}|[0-9]{4}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="c_TipoEmbalaje">""" + continueContent
    }
    content = content.replaceAll("xmlType=\"xs:int\"", "xmlType=\"xs:integer\"")
    file.setText(content, 'UTF-8')
}

static void replaceXsd(String filePath, List<String> downloads) {
    //Need to order, first tipoDatos and catalogos
    Comparator<String> comparator = { a, b ->
        if ((a.contains('/catalogos/') || a.contains('/tipoDatos/'))) {
            if (b.contains('/catalogos/') || b.contains('/tipoDatos/')) {
                return a <=> b
            } else {
                return -1
            }
        } else {
            if (b.contains('/catalogos/') || b.contains('/tipoDatos/')) {
                return 1
            } else {
                return a <=> b
            }
        }
    }
    //Add into the cfd/cfdi version class all xsd schemas
    List<String> imports = downloads
            .findAll { value -> value.endsWith('.xsd') }
            .collect { value -> '"' + value + '"' }
            .unique()
    imports.sort(comparator)
    File file = new File(filePath)
    String content = file.getText('UTF-8')
            .replaceAll(
                    '(?<=private final String\\[] XSD = new String\\[]\\{)((.|\\n)*?)(?=\\};)',
                    '\n            ' + imports.join(',\n            ') + '\n    '
            )
    file.setText(content, 'UTF-8')
}

static void replaceXslt(String filePath, String cadenaOriginal) {
    //Add into the cfd/cfdi version class the cadena original xslt
    File file = new File(filePath)
    String content = file.getText('UTF-8')
            .replaceAll(
                    '(?<=private final String XSLT = \")((.|\\n)*?)(?=\";)',
                    cadenaOriginal
            )
    file.setText(content, 'UTF-8')
}

tasks.register("satResources") {
    group = 'build'
    description = 'Download xsd and xslt resources'

    doLast {
        //Create list with all version and schema definition to download
        Map<String, List<String>> map = new HashMap<>()
        map.put(
                'src/main/java/mx/grupocorasa/sat/cfd/CFDv20.java',
                [
                        'http://www.sat.gob.mx/sitio_internet/cfd/2/cadenaoriginal_2_0/cadenaoriginal_2_0.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/2/cfdv2.xsd'
                ]
        )
        map.put(
                'src/main/java/mx/grupocorasa/sat/cfd/CFDv22.java',
                [
                        'http://www.sat.gob.mx/sitio_internet/cfd/2/cadenaoriginal_2_2/cadenaoriginal_2_2.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/2/cfdv22.xsd'
                ]
        )
        map.put(
                'src/main/java/mx/grupocorasa/sat/cfdi/v3/CFDv30.java',
                [
                        'http://www.sat.gob.mx/sitio_internet/cfd/3/cadenaoriginal_3_0/cadenaoriginal_3_0.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv3.xsd',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/cadenaoriginal_TFD_1_0.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigital.xsd'
                ]
        )
        map.put(
                'src/main/java/mx/grupocorasa/sat/cfdi/v3/CFDv32.java',
                [
                        'http://www.sat.gob.mx/sitio_internet/cfd/3/cadenaoriginal_3_2/cadenaoriginal_3_2.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv32.xsd',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/cadenaoriginal_TFD_1_0.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigital.xsd'
                ]
        )
        map.put(
                'src/main/java/mx/grupocorasa/sat/cfdi/v3/CFDv33.java',
                [
                        'http://www.sat.gob.mx/sitio_internet/cfd/3/cadenaoriginal_3_3/cadenaoriginal_3_3.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/cadenaoriginal_TFD_1_1.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigitalv11.xsd'
                ]
        )
        map.put(
                'src/main/java/mx/grupocorasa/sat/cfdi/v4/CFDv40.java',
                [
                        'https://raw.githubusercontent.com/GrupoCorasa/cfdi-base-sat-resources/main/cfd/4/cadenaoriginal_4_0/cadenaoriginal_4_0.xslt',
                        'https://raw.githubusercontent.com/GrupoCorasa/cfdi-base-sat-resources/main/cfd/4/cfdv40.xsd',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/cadenaoriginal_TFD_1_1.xslt',
                        'http://www.sat.gob.mx/sitio_internet/cfd/TimbreFiscalDigital/TimbreFiscalDigitalv11.xsd'
                ]
        )
        List<String> allDownloads = new ArrayList<>()
        map.each { Class, urls ->
            List<String> localDownloads = new ArrayList<>()
            urls.each { url ->
                downloadSatResouce(
                        localDownloads,
                        url,
                        'src/main/resources/'
                )
            }
            replaceXsd(Class, localDownloads)
            replaceXslt(
                    Class,
                    urls
                            .find { value -> value.endsWith(".xslt") }
                            .replace('http://www.sat.gob.mx/sitio_internet/', '/xslt/')
                            .replace('https://raw.githubusercontent.com/GrupoCorasa/cfdi-base-sat-resources/main/', '/xslt/')
            )
            allDownloads.addAll(localDownloads)
        }
        //Create all xjc bindings into build.gradle
        Map<String, String> namespaceMap = new HashMap<>()
        String bindingFileContent = "xjcGeneration {\n" +
                "\tdefaultAdditionalXjcOptions = ['encoding': 'UTF-8']\n" +
                "\tschemas{\n"
        String xsdRegexCats = '(?<=schemaLocation=\")(.*?)(?=\")'
        allDownloads.unique().findAll { filePath -> filePath.endsWith('.xsd') }
                .each { filePath ->
                    File _cbf = null
                    File actualXsd = new File("${rootDir}/src/main/resources" + filePath)
                    String xsdContent = actualXsd.getText('UTF-8')
                    String packageName = filePath
                            .substring(1, filePath.lastIndexOf('/'))
                            .replace('/', '.')
                            .replace('xsd', 'mx.grupocorasa.sat')
                            .replace('.2', '._2')
                            .replace('.3', '._3')
                            .replace('.4', '._4')
                    String version = new File("${rootDir}/src/main/resources/${filePath.substring(1)}").getText('UTF-8').find('(?<=xs:attribute name="(V|v)ersion")((.)*?)(?=>)')
                    if (version != null) {
                        version = version.find('(?<=fixed=")((.)*?)(?=")').replace(".", "")
                    }
                    if (version != null) {
                        packageName = packageName.replaceAll('\\d+$', '')
                        packageName += version
                    }
                    String _customBindingContent = """<jaxb:bindings version="2.1"
    xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <jaxb:bindings>
        <jaxb:globalBindings typesafeEnumMaxMembers="100000" typesafeEnumMemberName="generateName">
            <xjc:javaType name="java.time.LocalDateTime" xmlType="xs:dateTime" adapter="mx.grupocorasa.sat.util.DateTimeAdapter"/>
            <xjc:javaType name="java.time.LocalDate" xmlType="xs:date" adapter="mx.grupocorasa.sat.util.DateAdapter"/>
        </jaxb:globalBindings>
    </jaxb:bindings>"""
                    xsdContent.findAll(xsdRegexCats)
                            .each { xsdCatPath ->
                                if (xsdCatPath.contains('/catalogos/')) {
                                    String fileName = xsdCatPath.substring(xsdCatPath.indexOf('/catalogos/'))
                                    _customBindingContent = _customBindingContent + """\n\t<jaxb:bindings>
        <jaxb:bindings schemaLocation="../xsd/common${fileName}" node="/xs:schema">
            <jaxb:schemaBindings>
                <jaxb:package name="mx.grupocorasa.sat.common${fileName.substring(0, fileName.lastIndexOf("/")).replace("/", ".")}"/>
            </jaxb:schemaBindings>
        </jaxb:bindings>
    </jaxb:bindings>"""
                                }
                            }
                    _customBindingContent = _customBindingContent + """\n\t<jaxb:bindings>
        <jaxb:bindings schemaLocation="..${filePath}" node="/xs:schema">
            <jaxb:schemaBindings>
                <jaxb:package name="${packageName}"/>
            </jaxb:schemaBindings>
        </jaxb:bindings>
    </jaxb:bindings>
</jaxb:bindings>"""
                    _cbf = new File("src/main/resources/bindingFiles/${actualXsd.getName().replace(".xsd", "_bind.xml")}")
                    if (!_cbf.getParentFile().exists()) _cbf.getParentFile().mkdir()
                    _cbf.setText(_customBindingContent, 'UTF-8')

                    bindingFileContent += "\t\t" + packageName.replace('.', '_').replace('__', '_') + "{\n" +
                            "\t\t\tbindingFile = '" + (_cbf == null ? 'src/main/resources/bind.xml' : _cbf.getPath()) + "'\n" +
                            "\t\t\tschemaRootDir = 'src/main/resources'\n" +
                            "\t\t\tschemaFile = '" + filePath.substring(1) + "'\n" +
                            "\t\t}\n"
                    if (packageName.contains(".common.")) namespaceMap.put(packageName, filePath.substring(1))
                }
        bindingFileContent += '\t}\n}'

        File file = new File('build.gradle')
        String content = file.getText('UTF-8')
        int first_index = content.indexOf('//START OF XJC-GEN') + ('//START OF XJC-GEN'.length())
        int last_index = content.indexOf('//END OF XJC-GEN')
        content = content.substring(0, first_index) + "\n" + bindingFileContent + "\n" + content.substring(last_index)
        file.setText(content, 'UTF-8')

        String mapString = ''
        namespaceMap.forEach { pkg, xsd ->
            String xsdContent = new File('src/main/resources/' + xsd).getText('UTF-8')
            int start_index = xsdContent.indexOf("targetNamespace")
            String nsUrl = (xsdContent.substring(start_index, start_index + 150) =~ '(?<=targetNamespace=")((.)*?)(?=")').findAll()[0][0]
            String some = (xsdContent.substring(0, 150) =~ '(?<=xmlns:)((.)*?)(?==)').findAll().toString().split('\\[|\\]|,').find { value -> value != null && !value.trim().isEmpty() && !value.trim().equalsIgnoreCase("xs") && !value.trim().equalsIgnoreCase("s") }
            if (some != null && !some.equalsIgnoreCase("null")) {
                mapString = mapString + '\n\t\tnamespaceMap.put("' + some + ':' + pkg + '", "' + nsUrl + '");'
            }
        }
        file = new File('src/main/java/mx/grupocorasa/sat/common/CfdCommon.java')
        content = file.getText('UTF-8')
        first_index = content.indexOf('Map<String, String> namespaceMap = new HashMap<>();') + ('Map<String, String> namespaceMap = new HashMap<>();'.length())
        last_index = content.indexOf('return namespaceMap;')
        content = content.substring(0, first_index) + mapString + "\n\t\t" + content.substring(last_index)
        file.setText(content, 'UTF-8')
    }
}

tasks.register("cleanSatResources") {
    group = 'build'
    description = 'Clean xsd and xslt resources'

    doLast {
        List<String> genFolders = [
                "${rootDir}/src/main/resources/xsd/",
                "${rootDir}/src/main/resources/xslt/",
                "${rootDir}/src/main/resources/bindingFiles/"
        ]
        genFolders.each {
            if (new File(it).exists()) {
                delete it
            }
        }

        List<String> cfds = [
                'src/main/java/mx/grupocorasa/sat/cfd/CFDv20.java',
                'src/main/java/mx/grupocorasa/sat/cfd/CFDv22.java',
                'src/main/java/mx/grupocorasa/sat/cfdi/v3/CFDv30.java',
                'src/main/java/mx/grupocorasa/sat/cfdi/v3/CFDv32.java',
                'src/main/java/mx/grupocorasa/sat/cfdi/v3/CFDv33.java',
                'src/main/java/mx/grupocorasa/sat/cfdi/v4/CFDv40.java'
        ]

        cfds.each { f ->
            File file = new File(f)
            if (file.exists()) {
                String content = file.getText('UTF-8')
                String[] xsltSplit = content.split("private final String XSLT = \"")
                String continued = xsltSplit[1].substring(xsltSplit[1].indexOf("\""))
                content = xsltSplit[0] + "private final String XSLT = \"" + continued
                String[] xsdSplit = content.split("private final String\\[] XSD = new String\\[]\\{")
                continued = xsdSplit[1].substring(xsdSplit[1].indexOf("};"))
                content = xsdSplit[0] + "private final String[] XSD = new String[]{" + continued
                file.setText(content, 'UTF-8')
            }
        }

        String startToken = '//START OF XJC-GEN'
        File file = new File('build.gradle')
        String content = file.getText('UTF-8')
        int first_index = content.indexOf(startToken) + (startToken.length())
        int last_index = content.indexOf('//END OF XJC-GEN')
        content = content.substring(0, first_index) + "\n" + content.substring(last_index)
        file.setText(content, 'UTF-8')

        startToken = 'Map<String, String> namespaceMap = new HashMap<>();'
        file = new File('src/main/java/mx/grupocorasa/sat/common/CfdCommon.java')
        content = file.getText('UTF-8')
        first_index = content.indexOf(startToken) + (startToken.length())
        last_index = content.indexOf('return namespaceMap;')
        content = content.substring(0, first_index) + "\n\t\t" + content.substring(last_index)
        file.setText(content, 'UTF-8')
    }
}